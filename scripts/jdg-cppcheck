#!/bin/sh
GIT="/usr/bin/git"
REPORT_DIR="${WORKSPACE}/reports"
TAG_FILE="${REPORT_DIR}/tags.info"
SOURCE=${source:-source}
SHA=$(cd ${SOURCE}; ${GIT} show ${BUILD_TAG} | awk '/^commit [a-z0-9]+$/ { print $2 }')
BASE_TAG=${basetag:-}
SUP_FILE="${WORKSPACE}/suppressions.txt"
FULL=${full:-false}
HARD=${cppcheck_hard:-false}
set -e

get_tag_prev() {
	local bt
	if [ -f "$TAG_FILE" ]; then
		SHA_PREV=$(grep -v ${BUILD_TAG} ${TAG_FILE}| sort -r | cut -f2 -d:)
	else
		if [ -n "${BASE_TAG}" ]; then
			bt=$(cd ${SOURCE}; ${GIT} tag | grep "^${BASE_TAG}" | sort -r | head -n1)
			SHA_PREV=$(cd ${SOURCE}; ${GIT} show ${bt} | awk '/^commit [a-z0-9]+$/ { print $2 }')
		fi
	fi
}

save_tag_info() {
	local exist
	exist=$(grep -e ${BUILD_TAG} -e ${SHA} ${TAG_FILE} 2>/dev/null || true)
	if [ -z "$exist" ]; then
		echo "saving new tag:${BUILD_TAG} info to ${TAG_FILE}"
		echo "${BUILD_TAG}:${SHA}" >> ${TAG_FILE}
	fi
}

get_changed_files() {
	get_tag_prev
	if [ -n "${SHA_PREV}" ]; then
		CHANGES=$(cd ${SOURCE}; ${GIT} diff --name-only ${SHA_PREV}..${BUILD_TAG} | xargs )
	fi
	if [ -z "${CHANGES}" ]; then
		echo "use ${SOURCE} dir"
		CHANGES="${SOURCE}"
	fi
}

generate_empty_report() {
	cat > ${REPORT_DIR}/cppcheck.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
  <cppcheck version="1.54"/>
  <errors/>
</results>
EOF
}

generate_suppressions_file() {
	cat > ${SUP_FILE} << EOF
*:${1}ChangeLog
*:${1}Makefile*
*:${1}NEWS
*:${1}README*
*:${1}TODO
*:${1}pkg/*
*:${1}modules*/README
*:${1}modules*/doc/*
EOF
}

fix_source_path() {
	sed -e 's#file="#file="'${SOURCE}'/#g' ${REPORT_DIR}/cppcheck.xml
}

run_check() {
	local PARAM="--suppressions ${SUP_FILE} \
		--force --xml --xml-version=2"
	if [ $(echo "${HARD}"|tr '[:upper:]' '[:lower:]') = "true" ]; then
		PARAM="${PARAM} --enable=all --inconclusive"
	fi
	/usr/bin/cppcheck -j $(/usr/bin/nproc) ${PARAM} ${1} 2> ${REPORT_DIR}/cppcheck.xml
}

if ! which cppcheck >/dev/null 2>&1 ; then
  echo "cppcheck not available yet, installing cppcheck Debian package"
  sudo apt-get -y install cppcheck
fi

mkdir -p ${REPORT_DIR}

if [ $(echo "${FULL}"|tr '[:upper:]' '[:lower:]') = "true" ]; then
	generate_suppressions_file "${SOURCE}/"
	run_check ${SOURCE}
else
	get_changed_files
	save_tag_info

	if [ "${CHANGES}" != "${SOURCE}" ]; then
		cd ${SOURCE}
	else
		echo "No changes since last build job"
		generate_empty_report
		exit 0
	fi

	generate_suppressions_file
	run_check ${CHANGES}

	if [ "${CHANGES}" != "${SOURCE}" ]; then
		fix_source_path
	fi
fi
